package user

import (
	"context"
	"errors"

	"github.com/cantylv/service-happy-birthday/internal/entity"
	"github.com/cantylv/service-happy-birthday/internal/utils/myerrors"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

type User struct {
	Id       primitive.ObjectID    `bson:"_id"`
	FullName string                `bson:"full_name"`
	Birthday string                `bson:"birthday"`
	Email    string                `bson:"email"`
	Password string                `bson:"password"`
	Subs     []entity.Subscription `bson:"subs,omitempty"`
}

type Repo interface {
	Create(ctx context.Context, data *User) (string, error)
	Update(ctx context.Context, data *User) error
	GetByEmail(ctx context.Context, email string) (*User, error)
	GetById(ctx context.Context, id primitive.ObjectID) (*User, error)
}

type RepoLayer struct {
	cl *mongo.Collection
}

// NewRepoLayer
// Returns an instance of repository layer.
func NewRepoLayer(collection *mongo.Collection) RepoLayer {
	return RepoLayer{
		cl: collection,
	}
}

// Create
// Creates new user in database.
func (r *RepoLayer) Create(ctx context.Context, data *User) (string, error) {
	insertData := bson.M{
		"full_name": data.FullName,
		"birthday":  data.Birthday,
		"email":     data.Email,
		"password":  data.Password,
		"subs":      data.Subs,
	}
	res, err := r.cl.InsertOne(ctx, insertData)
	if err != nil {
		return "", err
	}
	if res.InsertedID == nil {
		return "", myerrors.ErrInvalidObjectId
	}
	return res.InsertedID.(primitive.ObjectID).Hex(), nil
}

// Update
// Updates data about existing user in database.
func (r *RepoLayer) Update(ctx context.Context, data *User) error {
	filter := bson.M{"_id": data.Id}
	update := bson.M{
		"$set": bson.M{
			"full_name": data.FullName,
			"birthday":  data.Birthday,
			"email":     data.Email,
			"password":  data.Password,
		},
	}
	res, err := r.cl.UpdateOne(ctx, filter, update)
	if err != nil {
		return err
	}
	if res.MatchedCount == 0 {
		return myerrors.ErrUserNotExist
	}
	if res.ModifiedCount == 0 {
		return myerrors.ErrUpdateFailed
	}
	return nil
}

// GetByEmail
// Returns user's struct from document using user email (distinct field).
func (r *RepoLayer) GetByEmail(ctx context.Context, email string) (*User, error) {
	u := User{}
	err := r.cl.FindOne(ctx, bson.M{"email": email}).Decode(&u)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, myerrors.ErrUserNotExist
		}
		return nil, err
	}
	return &u, nil
}

// GetById
// Returns user's struct from document using user id (autogenerated field).
func (r *RepoLayer) GetById(ctx context.Context, id primitive.ObjectID) (*User, error) {
	u := User{}
	err := r.cl.FindOne(ctx, bson.M{"_id": id}).Decode(&u)
	if err != nil {
		if errors.Is(err, mongo.ErrNoDocuments) {
			return nil, myerrors.ErrUserNotExist
		}
		return nil, err
	}
	return &u, nil
}
