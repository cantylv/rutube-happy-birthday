version: '3.9'

services:
  # services (sqldb, s3, in-memory)
  birthday-service:
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    container_name: server
    ports:
      - "8000:8000"
    networks:
      - ecosystem
    volumes:
      - ./notification.json:/root/notification.json
    depends_on:
      - memcached
      - mongo
      - kafka
  mongo:
    image: mongo:latest
    restart: always
    container_name: mongo
    volumes:
      - ./services/mongodb/initdb.d/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - ./services/mongodb/mongodb-data:/data/db
      - ./services/mongodb/mongodb-log:/var/log/mongodb
    ports:
      - "27017:27017"
    networks:
      - ecosystem
  memcached:
    image: memcached:latest  
    restart: always
    container_name: memcached
    ports:
      - "11211:11211"
    networks:
      - ecosystem
    command: memcached -m 64
  kafka:
    image: docker.io/bitnami/kafka:3.8
    restart: always
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - ecosystem
    volumes:
      - ./services/kafka/data:/bitnami/kafka

networks:
  ecosystem:
    driver: bridge